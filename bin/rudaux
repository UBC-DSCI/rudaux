#!/usr/bin/python3

from argparse import ArgumentParser
from rudaux import flows, __version__
import pendulum as plm
import os
import sys
import pyfiglet
import termcolor

parser = ArgumentParser()
subparsers = parser.add_subparsers(
    title='Subcommands', dest="subparser", help='Commands that rudaux can process.'
)

# ---------------------------------------------
#           Run workflows with orchestration
# ---------------------------------------------
reg_parser = subparsers.add_parser(
    'register', help='Register course management workflows with an orchestration server')
reg_parser.set_defaults(func=flows.register)
reg_parser.add_argument(
    '--dir',
    dest='directory',
    action='store',
    default=os.getcwd(),
    help="the directory containing the rudaux configuration file."
)
reg_parser.add_argument(
    '--all',
    dest='all_flows',
    action='store_true',
    help="Register all flows"
)
reg_parser.add_argument(
    '--autoext',
    dest='autoext',
    action='store_true',
    help="Register the autoextension flow"
)
reg_parser.add_argument(
    '--snap',
    dest='snap',
    action='store_true',
    help="Register the snapshot flow"
)
reg_parser.add_argument(
    '--grade',
    dest='grade',
    action='store_true',
    help="Register the grading flow"
)

# ---------------------------------------------
#           Run workflows in threads locally
# ---------------------------------------------
run_parser = subparsers.add_parser(
    'run', help='Run course management workflows locally in threads')
run_parser.set_defaults(func=flows.run)
run_parser.add_argument(
    '--dir',
    dest='directory',
    action='store',
    default=os.getcwd(),
    help="the directory containing the rudaux configuration file."
)
run_parser.add_argument(
    '--all',
    dest='all_flows',
    action='store_true',
    help="Run all flows"
)
run_parser.add_argument(
    '--autoext',
    dest='autoext',
    action='store_true',
    help="Run the autoextension flow"
)
run_parser.add_argument(
    '--snap',
    dest='snap',
    action='store_true',
    help="Run the snapshot flow"
)
run_parser.add_argument(
    '--grade',
    dest='grade',
    action='store_true',
    help="Run the grading flow"
)

# ---------------------------------------------
#           List workflows/runs and status
# ---------------------------------------------
status_parser = subparsers.add_parser('status', help='Print workflow status')
status_parser.set_defaults(func=flows.status)


# ------------------------------------
#           List
# ------------------------------------
list_parser = subparsers.add_parser(
    'list', help='Print a list of assignments, students, etc')
list_parser.set_defaults(func=flows.list_course_info)
list_parser.add_argument(
    '--dir',
    dest='directory',
    action='store',
    default=os.getcwd(),
    help="The directory containing the rudaux configuration file."
)

# ------------------------------------
# Snapshot
# ------------------------------------
#
#snap_parser = subparsers.add_parser('snapshot', help='Take a snapshot of submissions past the assignment due date.')
# snap_parser.set_defaults(func=commands.snapshot)
# snap_parser.add_argument(
#  '--dir',
#  dest='directory',
#  action='store',
#  default=os.getcwd(),
#  help="The directory containing the rudaux configuration file."
# )
# snap_parser.add_argument(
#  '--dry-run',
#  dest='dry_run',
#  action='store_true',
#  default=False,
#  help="Specify that the snapshot should not actually be taken and print the zfs command instead."
# )
#
#
# ---------------------------------------------
# Extensions for Late Registrants
# ---------------------------------------------
#
#latereg_parser = subparsers.add_parser('extend_lateregs', help='Create due date overrides for late registrants')
# latereg_parser.set_defaults(func=commands.apply_latereg_extensions)
# latereg_parser.add_argument(
#  '--dir',
#  dest='directory',
#  action='store',
#  default=os.getcwd(),
#  help="The directory containing the rudaux configuration file."
# )
# latereg_parser.add_argument(
#  '--dry-run',
#  dest='dry_run',
#  action='store_true',
#  default=False,
#  help="Specify that late registrations should not actually be provided canvas extensions and print the canvas api calls instead."
# )


# Parse the arguments!
args = parser.parse_args()
if args.subparser is not None:
    args.func(args)
else:
    # Otherwise, no subcommand was called, so print a header and help text
    sys.stdout.write("\n")
    termcolor.cprint(pyfiglet.figlet_format("Rudaux"), 'blue', attrs=['bold'])
    sys.stdout.write('Version ' + __version__ + '\n')
    sys.stdout.write('DateTime: ' + str(plm.now('UTC'))+'\n')
    sys.stdout.write('Command: ' + str(sys.argv)+'\n')
    sys.stdout.write('Working Dir: ' + str(os.getcwd())+'\n')
    sys.stdout.write(
        "Visit the documentation at https://ubc-dsci.github.io/rudaux\n")
    sys.stdout.write(
        '============================================================\n')
    sys.stdout.write('\n')
    args = parser.parse_known_args(['-h'])
