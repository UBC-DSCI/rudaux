#!/usr/bin/python3
from argparse import ArgumentParser
from rudaux import flows, __version__
import pendulum as plm
import os
import sys
import pyfiglet
import termcolor
import asyncio

parser = ArgumentParser()
subparsers = parser.add_subparsers(
    title='Subcommands', dest="subparser", help='Commands that rudaux can process.'
)

CONFIG_FILE = 'rudaux_config.yml'

# ---------------------------------------------
#           Run workflows 
# ---------------------------------------------
run_parser = subparsers.add_parser(
    'run', help='Run course management workflows locally')
run_parser.set_defaults(func=flows.run)
run_parser.add_argument(
    '--config',
    dest='config_path',
    action='store',
    default=os.path.join(os.getcwd(), CONFIG_FILE),
    help="the path to the rudaux configuration file."
)

# ---------------------------------------------
#           Register workflows 
# ---------------------------------------------
register_parser = subparsers.add_parser(
    'register', help='Register course management workflows')
register_parser.set_defaults(func=flows.register)
register_parser.add_argument(
    '--config',
    dest='config_path',
    action='store',
    default=os.path.join(os.getcwd(), CONFIG_FILE),
    help="the path to the rudaux configuration file."
)
register_parser.add_argument(
    '--all',
    dest='all_flows',
    action='store_true',
    help="Run all flows"
)
register_parser.add_argument(
    '--autoext',
    dest='autoext',
    action='store_true',
    help="Run the autoextension flow"
)
register_parser.add_argument(
    '--snap',
    dest='snap',
    action='store_true',
    help="Run the snapshot flow"
)
register_parser.add_argument(
    '--grade',
    dest='grade',
    action='store_true',
    help="Run the grading flow"
)
register_parser.add_argument(
    '--solution',
    dest='grade',
    action='store_true',
    help="Run the solution return flow"
)
register_parser.add_argument(
    '--feedback',
    dest='grade',
    action='store_true',
    help="Run the feedback return flow"
)


# ------------------------------------
#           List
# ------------------------------------
list_parser = subparsers.add_parser(
    'list', help='Print a list of assignments, students, etc')
list_parser.set_defaults(func=flows.list_course_info)
list_parser.add_argument(
    '--config',
    dest='config_path',
    action='store',
    default=os.path.join(os.getcwd(), CONFIG_FILE),
    help="the path to the rudaux configuration file."
)

## -------------------------------------
##       Status of workflows/runs
## -------------------------------------
#status_parser = subparsers.add_parser('status', help='Print workflow status')
#status_parser.set_defaults(func=flows.status)

# Parse the arguments!
args = parser.parse_args()
if args.subparser is not None:
    asyncio.run(args.func(args))
else:
    # Otherwise, no subcommand was called, so print a header and help text
    sys.stdout.write("\n")
    termcolor.cprint(pyfiglet.figlet_format("Rudaux"), 'blue', attrs=['bold'])
    sys.stdout.write('Version ' + __version__ + '\n')
    sys.stdout.write('DateTime: ' + str(plm.now('UTC'))+'\n')
    sys.stdout.write('Command: ' + str(sys.argv)+'\n')
    sys.stdout.write('Working Dir: ' + str(os.getcwd())+'\n')
    sys.stdout.write("Visit the documentation at https://ubc-dsci.github.io/rudaux\n")
    sys.stdout.write('============================================================\n')
    sys.stdout.write('\n')
    args = parser.parse_known_args(['-h'])
